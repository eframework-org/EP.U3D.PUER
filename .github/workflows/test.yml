name: 单元测试

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

permissions:
  checks: write
  contents: read
  actions: read
  security-events: write

jobs:
  test:
    name: 测试 ${{ matrix.testMode }} 环境
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Package/Samples~
        unityVersion: [6000.0.32f1]
        testMode: [EditMode]
    outputs:
      passed: ${{ steps.tests.conclusion == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          lfs: true
          path: Package

      - name: 检出缓存
        uses: actions/cache@v3
        with:
          path: Package/${{ matrix.projectPath }}/Library
          key: Library-${{ runner.os }}-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ runner.os }}-

      - name: 设置 MinIO 环境
        shell: bash
        run: |
          # 创建临时目录
          mkdir -p /c/minio/data
          
          # 下载 MinIO 服务器和客户端
          echo "下载 MinIO 服务器..."
          curl -L -o /c/minio/minio.exe https://dl.min.io/server/minio/release/windows-amd64/minio.exe --progress-bar
          echo "下载 MinIO 客户端..."
          curl -L -o /c/minio/mc.exe https://dl.min.io/client/mc/release/windows-amd64/mc.exe --progress-bar
          
          # 设置环境变量
          export MINIO_ACCESS_KEY="admin"
          export MINIO_SECRET_KEY="adminadmin"
          
          # 启动 MinIO 服务器 (在后台运行)
          echo "启动 MinIO 服务器..."
          /c/minio/minio.exe server /c/minio/data --console-address ":9090" --address ":9000" > /c/minio/minio.log 2>&1 &
          
          # 等待 MinIO 服务启动
          echo "等待 MinIO 服务启动..."
          max_retries=30
          retry_interval=2
          retry_count=0
          
          until curl -s --head http://localhost:9000/minio/health/ready || [ $retry_count -eq $max_retries ]; do
            echo "等待 MinIO 服务就绪... (尝试 $retry_count/$max_retries)"
            sleep $retry_interval
            retry_count=$((retry_count+1))
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "MinIO 服务启动超时，检查日志:"
            cat /c/minio/minio.log
            exit 1
          fi
          
          echo "MinIO 服务已就绪"
          
          # 配置 MinIO 客户端
          echo "配置 MinIO 客户端..."
          /c/minio/mc.exe alias set myminio http://localhost:9000 admin adminadmin
          
          # 创建 default bucket 并设置为公开访问
          echo "创建 default bucket..."
          /c/minio/mc.exe mb myminio/default
          echo "设置 default bucket 为公开访问..."
          /c/minio/mc.exe anonymous set public myminio/default
          
          echo "MinIO 环境设置完成，default bucket 已创建并设置为公开访问"
          
          # 添加 MinIO 目录到 PATH
          echo "/c/minio" >> $GITHUB_PATH

      - name: 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
          
      - name: 打印 Node.js 和 npm 信息
        shell: bash
        run: |
          # 打印 Node.js 和 npm 版本
          echo "Node.js 版本: $(node -v)"
          echo "npm 版本: $(npm -v)"
          
          # 打印 Node.js 和 npm 的完整路径 (Unix格式)
          echo "Node.js 路径 (Unix): $(which node)"
          echo "npm 路径 (Unix): $(which npm)"
          
          # 打印 Node.js 和 npm 的完整路径 (Windows格式)
          NODE_WIN_PATH=$(which node | sed 's/^\///;s/\//\\/g;s/^/C:\\/')
          NPM_WIN_PATH=$(which npm | sed 's/^\///;s/\//\\/g;s/^/C:\\/')
          echo "Node.js 路径 (Windows): $NODE_WIN_PATH"
          echo "npm 路径 (Windows): $NPM_WIN_PATH"
          
          # 打印环境变量中的路径设置
          echo "PATH 环境变量: $PATH"
          
          # 检查 node 和 npm 是否可执行
          echo "检查 node 是否可执行:"
          node --version && echo "node 可以执行" || echo "node 不可执行"
          echo "检查 npm 是否可执行:"
          npm --version && echo "npm 可以执行" || echo "npm 不可执行"
          
          # 查看 Node.js 安装目录内容
          NODE_DIR=$(dirname $(which node))
          echo "Node.js 安装目录 ($NODE_DIR) 内容:"
          ls -la $NODE_DIR
          
          # 保存 NODE_DIR 到环境变量
          echo "NODE_DIR=$NODE_DIR" >> $GITHUB_ENV
          
      - name: 复制 Node.js 文件到项目 Library 目录
        shell: bash
        run: |
          # 确保目标目录存在
          mkdir -p ${{ matrix.projectPath }}/Local
          
          # 复制 Node.js 目录内容到项目 Library 目录
          echo "复制 Node.js 文件到项目目录..."
          cp -rv $NODE_DIR/* ${{ matrix.projectPath }}/Local/
          
          # 复制 npm
          NPM_DIR=$(dirname $(which npm))
          if [ "$NODE_DIR" != "$NPM_DIR" ]; then
            echo "npm 在不同目录，也进行复制..."
            cp -rv $NPM_DIR/* ${{ matrix.projectPath }}/Local/
          fi
          
          # 查看复制后的文件
          echo "复制后的 Node.js 文件列表:"
          ls -la ${{ matrix.projectPath }}/Local/
          
          # 确保 node 和 npm 可执行
          echo "设置可执行权限..."
          chmod +x ${{ matrix.projectPath }}/Local/node
          chmod +x ${{ matrix.projectPath }}/Local/npm
          
          # 验证复制后的 Node.js 可执行性
          echo "验证复制后的 Node.js..."
          cd ${{ matrix.projectPath }}
          
          echo "测试 node 可执行性:"
          ./Local/node --version && echo "✓ node 执行成功" || echo "✗ node 执行失败"
          
          echo "测试 npm 可执行性:"
          ./Local/npm --version && echo "✓ npm 执行成功" || echo "✗ npm 执行失败"
          
          echo "测试简单 Node.js 脚本:"
          echo "console.log('Hello from Node.js in Project Local directory');" > test.js
          ./Local/node test.js && echo "✓ 脚本执行成功" || echo "✗ 脚本执行失败"
          
          # 保存路径到环境变量
          NODE_COPY_PATH=$(pwd)/Local
          echo "NODE_COPY_PATH=$NODE_COPY_PATH" >> $GITHUB_ENV
      
      - name: 运行测试
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: Results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: 测试 ${{ matrix.testMode }} 报告

      - name: 上传报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test.${{ matrix.testMode }}.Reports
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 14