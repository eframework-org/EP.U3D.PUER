name: 单元测试

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

permissions:
  checks: write
  contents: read
  actions: read
  security-events: write

jobs:
  test:
    name: 测试 ${{ matrix.testMode }} 环境
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Package
        unityVersion: [6000.0.32f1]
        testMode: [EditMode]
    outputs:
      passed: ${{ steps.tests.conclusion == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          lfs: true
          path: Package

      - name: 设置 MinIO 环境
        shell: powershell
        run: |
          # 创建临时目录
          New-Item -ItemType Directory -Path "C:\minio" -Force
          New-Item -ItemType Directory -Path "C:\minio\data" -Force
          
          # 下载 MinIO 服务器和客户端
          $minioServerUrl = "https://dl.min.io/server/minio/release/windows-amd64/minio.exe"
          $minioClientUrl = "https://dl.min.io/client/mc/release/windows-amd64/mc.exe"
          
          Write-Host "下载 MinIO 服务器..."
          Invoke-WebRequest -Uri $minioServerUrl -OutFile "C:\minio\minio.exe"
          Write-Host "下载 MinIO 客户端..."
          Invoke-WebRequest -Uri $minioClientUrl -OutFile "C:\minio\mc.exe"
          
          # 启动 MinIO 服务器
          Write-Host "启动 MinIO 服务器..."
          $env:MINIO_ACCESS_KEY = "admin"
          $env:MINIO_SECRET_KEY = "adminadmin"
          
          Start-Process -FilePath "C:\minio\minio.exe" -ArgumentList "server", "C:\minio\data", "--console-address", ":9090", "--address", ":9000" -NoNewWindow -PassThru
          
          # 等待 MinIO 服务启动
          Write-Host "等待 MinIO 服务启动..."
          $maxRetries = 30
          $retryInterval = 2
          $retryCount = 0
          $isReady = $false
          
          while (-not $isReady -and $retryCount -lt $maxRetries) {
            try {
              $response = Invoke-WebRequest -Uri "http://localhost:9000/minio/health/ready" -Method Head -ErrorAction SilentlyContinue
              if ($response.StatusCode -eq 200) {
                $isReady = $true
                Write-Host "MinIO 服务已就绪"
              }
            } catch {
              Write-Host "等待 MinIO 服务就绪... (尝试 $retryCount/$maxRetries)"
              Start-Sleep -Seconds $retryInterval
              $retryCount++
            }
          }
          
          if (-not $isReady) {
            Write-Error "MinIO 服务启动超时"
            exit 1
          }
          
          # 配置 MinIO 客户端
          Write-Host "配置 MinIO 客户端..."
          Start-Process -FilePath "C:\minio\mc.exe" -ArgumentList "alias", "set", "myminio", "http://localhost:9000", "admin", "adminadmin" -NoNewWindow -Wait
          
          # 创建 default bucket 并设置为公开访问
          Write-Host "创建 default bucket..."
          Start-Process -FilePath "C:\minio\mc.exe" -ArgumentList "mb", "myminio/default" -NoNewWindow -Wait
          Write-Host "设置 default bucket 为公开访问..."
          Start-Process -FilePath "C:\minio\mc.exe" -ArgumentList "anonymous", "set", "public", "myminio/default" -NoNewWindow -Wait
          
          Write-Host "MinIO 环境设置完成，default bucket 已创建并设置为公开访问"
          
          # 添加 MinIO 目录到 PATH
          echo "C:\minio" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 运行测试
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          packageMode: true
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          scopedRegistryUrl: >-
            [
              "https://registry.npmjs.org/",
              "https://package.openupm.com"
            ]
          registryScopes: >-
            [
              "et",
              "ep",
              "com.tencent.puerts.core",
              "com.tencent.puerts.ts-loader"
            ]
          testMode: ${{ matrix.testMode }}
          artifactsPath: Results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: 测试 ${{ matrix.testMode }} 报告
          useHostNetwork: true

      - name: 上传报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test.${{ matrix.testMode }}.Reports
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 14