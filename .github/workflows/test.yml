name: 单元测试

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      test_passed:
        description: "测试是否通过"
        value: ${{ jobs.test.outputs.passed }}
    secrets:
      UNITY_LICENSE:
        required: true
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

permissions:
  checks: write
  contents: read
  actions: read
  security-events: write

jobs:
  test:
    name: 测试 ${{ matrix.testMode }} 环境
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Package/Samples~
        unityVersion: [6000.0.32f1]
        testMode: [EditMode]
    outputs:
      passed: ${{ steps.tests.conclusion == 'success' }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          lfs: true
          path: Package

      - name: 检出缓存
        uses: actions/cache@v3
        with:
          path: Package/${{ matrix.projectPath }}/Library
          key: Library-${{ runner.os }}-${{ hashFiles('**/ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ runner.os }}-

      - name: 设置 MinIO 环境
        shell: bash
        run: |
          # 创建临时目录
          mkdir -p /c/minio/data
          
          # 下载 MinIO 服务器和客户端
          echo "下载 MinIO 服务器..."
          curl -L -o /c/minio/minio.exe https://dl.min.io/server/minio/release/windows-amd64/minio.exe --progress-bar
          echo "下载 MinIO 客户端..."
          curl -L -o /c/minio/mc.exe https://dl.min.io/client/mc/release/windows-amd64/mc.exe --progress-bar
          
          # 设置环境变量
          export MINIO_ACCESS_KEY="admin"
          export MINIO_SECRET_KEY="adminadmin"
          
          # 启动 MinIO 服务器 (在后台运行)
          echo "启动 MinIO 服务器..."
          /c/minio/minio.exe server /c/minio/data --console-address ":9090" --address ":9000" > /c/minio/minio.log 2>&1 &
          
          # 等待 MinIO 服务启动
          echo "等待 MinIO 服务启动..."
          max_retries=30
          retry_interval=2
          retry_count=0
          
          until curl -s --head http://localhost:9000/minio/health/ready || [ $retry_count -eq $max_retries ]; do
            echo "等待 MinIO 服务就绪... (尝试 $retry_count/$max_retries)"
            sleep $retry_interval
            retry_count=$((retry_count+1))
          done
          
          if [ $retry_count -eq $max_retries ]; then
            echo "MinIO 服务启动超时，检查日志:"
            cat /c/minio/minio.log
            exit 1
          fi
          
          echo "MinIO 服务已就绪"
          
          # 配置 MinIO 客户端
          echo "配置 MinIO 客户端..."
          /c/minio/mc.exe alias set myminio http://localhost:9000 admin adminadmin
          
          # 创建 default bucket 并设置为公开访问
          echo "创建 default bucket..."
          /c/minio/mc.exe mb myminio/default
          echo "设置 default bucket 为公开访问..."
          /c/minio/mc.exe anonymous set public myminio/default
          
          echo "MinIO 环境设置完成，default bucket 已创建并设置为公开访问"
          
          # 添加 MinIO 目录到 PATH
          echo "/c/minio" >> $GITHUB_PATH

      - name: 构建 Unity 镜像
        shell: bash
        run: |
          # 创建临时 Dockerfile
          cat > Dockerfile << EOF
          # 基于 unityci/editor 镜像
          FROM unityci/editor:windows-${{ matrix.unityVersion }}-windows-il2cpp-3

          # 安装 Node.js 软件
          RUN powershell -Command \
              $env:NODE_VERSION='18.16.0'; \
              Write-Host "Downloading Node.js v$env:NODE_VERSION"; \
              Invoke-WebRequest -Uri "https://nodejs.org/dist/v$env:NODE_VERSION/node-v$env:NODE_VERSION-x64.msi" -OutFile nodejs.msi; \
              Write-Host "Installing Node.js"; \
              Start-Process msiexec.exe -ArgumentList '/i', 'nodejs.msi', '/quiet', '/norestart' -NoNewWindow -Wait; \
              Write-Host "Node.js installation completed"; \
              Remove-Item -Force nodejs.msi; \
              Write-Host "Node.js version:"; \
              node --version; \
              Write-Host "npm version:"; \
              npm --version
          EOF

          # 构建镜像
          docker build -t unity-windows-editor-nodejs:latest .
          
          # 显示镜像
          docker images | grep unity-windows-editor-nodejs
      
      - name: 运行测试
        uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          NODE_PATH: ${{ env.NODE_PATH }}
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: Results
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: 测试 ${{ matrix.testMode }} 报告
          customImage: unity-windows-editor-nodejs:latest

      - name: 上传报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test.${{ matrix.testMode }}.Reports
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 14